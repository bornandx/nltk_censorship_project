b'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tSocket Workbench - TCP/IP Socket communications analysis\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// < ! [ CDATA [ \r\nvar theForm = document.forms [ \'aspnetForm\ ' ] ; \r\nif ( ! theForm ) { \r\n theForm = document.aspnetForm ; \r\n } \r\nfunction __doPostBack ( eventTarget , eventArgument ) { \r\n if ( ! theForm.onsubmit || ( theForm.onsubmit ( ) ! = false ) ) { \r\n theForm.__EVENTTARGET.value = eventTarget ; \r\n theForm.__EVENTARGUMENT.value = eventArgument ; \r\n theForm.submit ( ) ; \r\n } \r\n } \r\n// ] ] > \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// < ! [ CDATA [ \r\nif ( typeof ( Sys ) === \'undefined\ ' ) throw new Error ( \'ASP.NET Ajax client-side framework failed to load.\ ' ) ; \r\n// ] ] > \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n \r\n// < ! [ CDATA [ \r\nSys.WebForms.PageRequestManager._initialize ( \'ctl00 $ ScriptManager1\ ' , document.getElementById ( \'aspnetForm\ ' ) ) ; \r\nSys.WebForms.PageRequestManager.getInstance ( ) ._updateControls ( [ ] , [ ] , [ ] , 90 ) ; \r\n// ] ] > \r\n\r\n\r\n \r\n Socket Workbench \r\n \r\n \r\n\t\r\n\t\tHomeFeaturesScreen ShotsDownloadSupportVideosPurchaseContact UsAbout Us\r\n\t\r\n\r\n \r\n \r\n \r\n \r\n Welcome to Socket Workbench \xc2\xa0 Socket Workbench is the definitive tool for analyzing TCP socket communications . \xc2\xa0 Socket Workbench can be configured to run as a socket client or as a socket server . You can send and receive both text and binary data that you have typed in or read from a file . It can be used to `` stress test '' servers and clients . \xc2\xa0 Socket Workbench is ideal for analyzing HTTP and\xc2\xa0SMTP and as it includes a library of common protocols . \xc2\xa0 Download \xc2\xa0 \xc2\xa0Download Socket Workbench Features \xc2\xa0 Features of Socket Workbench include : the ability to send data at regular intervals ; the ability to analyze data in either raw , binary , octal , decimal or hexadecimal format ; logging of incoming and outgoing data using time stamps ; logging of socket state transitions and events ; filtering of incoming data ; and more ... \xc2\xa0 More information ... \xc2\xa0 Common Configurations Socket Workbench is ideal for people wishing to learn how the e-mail protocols works through to developing and debugging real time two/three/n tier client server applications . Socket Workbench contains a setup wizard that handles seven common configurations : Web Server , Web Browser , Web Browser ( via a Proxy ) , Sending E-mail , Keep Alive requests , Quote of the Day and Time Of Day \xc2\xa0 Client/Server Development \xc2\xa0 Often in the development of a client-server application that utilizes sockets , one end of the socket connection will be developed before the other end is written . Although a communication protocol is defined , programmers can find it difficult to write the communications library without actually connecting to anything . \xc2\xa0 This is where Socket Workbench comes in . Write the application and have Socket Workbench ready and waiting for your connection . Configure it to automatically send data so you can test your end of the application independently of the other end . \xc2\xa0 Once both ends of the socket connection are written , configure Socket Workbench to intercept the communications between the applications to ensure that the protocol is being adhered to . * \xc2\xa0 TCP/IP Protocols \xc2\xa0 Socket Workbench makes for an ideal training tool . If you are interested in how web browsers work or how your e-mail client sends and reads its mail then Socket Workbench can be configured to handle it . You can even send anonymous E-mails once you have learnt the protocol . \xc2\xa0 It is also great at sending and receiving SOAP/WCF/WebService packets to simulate web service communications . \xc2\xa0 \xc2\xa0\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Contact Us\r\n E-mail : support @ socketworkbench.com\r\n \r\n \r\n \r\n \r\n Â© Sigma Solutions . All rights reserved.\r\n \r\n \r\n Sitefinity ASP.NET CMS\r\n\r\n\r\n// < ! [ CDATA [ \r\nSys.Application.initialize ( ) ; \r\nSys.Application.add_init ( function ( ) { \r\n $ create ( Telerik.Web.UI.RadTabStrip , { `` _selectedIndex '' :0 , '' _skin '' : '' Default '' , '' clientStateFieldID '' : '' ctl00_TopMenu_ctl00_RadTabstrip1_ClientState '' , '' selectedIndexes '' : [ `` 0 '' ] , '' tabData '' : [ { } , { } , { } , { } , { } , { } , { } , { } , { } ] } , null , null , $ get ( `` ctl00_TopMenu_ctl00_RadTabstrip1 '' ) ) ; \r\n } ) ; \r\n// ] ] > \r\n\r\n\r\n\r\n\r\n ' 