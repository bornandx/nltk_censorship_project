b'\r\n\r\n\r\n\r\n\r\ndesign - Struct like objects in Java - Stack Overflow\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n StackExchange.ready ( function ( ) { \r\n \r\n StackExchange.using ( `` snippets '' , function ( ) { \r\n StackExchange.snippets.initSnippetRenderer ( ) ; \r\n } ) ; \r\n \r\n\r\n StackExchange.using ( `` postValidation '' , function ( ) { \r\n StackExchange.postValidation.initOnBlurAndSubmit ( $ ( \ ' # post-form\ ' ) , 2 , \'answer\ ' ) ; \r\n } ) ; \r\n\r\n \r\n StackExchange.question.init ( { showAnswerHelp : true , totalCommentCount:5 , shownCommentCount:5 , highlightColor : \ ' # F4A83D\ ' , backgroundColor : \ ' # FFF\ ' , questionId:36701 } ) ; \r\n\r\n styleCode ( ) ; \r\n\r\n StackExchange.realtime.subscribeToQuestion ( \'1\ ' , \'36701\ ' ) ; \r\n StackExchange.using ( `` gps '' , function ( ) { StackExchange.gps.trackOutboundClicks ( \ ' # content\ ' , \'.post-text\ ' , true ) ; } ) ; \r\n\r\n } ) ; \r\n \r\n\r\n\r\n \r\n StackExchange.init ( { `` locale '' : '' en '' , '' stackAuthUrl '' : '' https : //stackauth.com '' , '' networkMetaHostname '' : '' meta.stackexchange.com '' , '' serverTime '' :1481386982 , '' routeName '' : '' Questions/Show '' , '' site '' : { `` name '' : '' Stack Overflow '' , '' description '' : '' Q & A for professional and enthusiast programmers '' , '' isNoticesTabEnabled '' : true , '' recaptchaPublicKey '' : '' 6LdchgIAAAAAAJwGpIzRQSOFaO0pU6s44Xt8aTwc '' , '' recaptchaAudioLang '' : '' en '' , '' enableNewTagCreationWarning '' : true , '' insertSpaceAfterNameTabCompletion '' : false , '' id '' :1 , '' enableInsertDocLinkDialog '' : true , '' enableSocialMediaInSharePopup '' : true } , '' user '' : { `` fkey '' : '' 7b1b7f4e1a6b23324556540c1e6d03a0 '' , '' rep '' :0 , '' isAnonymous '' : true , '' isAnonymousNetworkWide '' : true } , '' events '' : { `` postType '' : { `` question '' :1 } , '' postEditionSection '' : { `` title '' :1 , '' body '' :2 , '' tags '' :3 } } , '' story '' : { `` minCompleteBodyLength '' :75 } } , { `` site '' : { `` allowImageUploads '' : true , '' enableUserHovercards '' : true , '' styleCode '' : true , '' enableNewLinkInsertDialog '' : true , '' enableNewHeaderDesign '' : true , '' enableImgurHttps '' : true } , '' comments '' : { } , '' tags '' : { } , '' accounts '' : { `` currentPasswordRequiredForChangingStackIdPassword '' : true } , '' flags '' : { `` allowRetractingFlags '' : true } , '' analytics '' : { `` clientTimingsAbsoluteTimeout '' :30000 , '' clientTimingsDebounceTimeout '' :1000 } , '' snippets '' : { `` snippetsEnabled '' : true , '' renderDomain '' : '' stacksnippets.net '' } , '' markdown '' : { `` asteriskIntraWordEmphasis '' : true } } ) ; \r\n StackExchange.using.setCacheBreakers ( { `` js/prettify-full.en.js '' : '' 06d67193cff4 '' , '' js/moderator.en.js '' : '' 1bdc231dc7f5 '' , '' js/full-anon.en.js '' : '' 49075288bf9b '' , '' js/full.en.js '' : '' 53dd47f49d45 '' , '' js/wmd.en.js '' : '' 1966ce920971 '' , '' js/third-party/jquery.autocomplete.min.js '' : '' e5f01e97f7c3 '' , '' js/third-party/jquery.autocomplete.min.en.js '' : '' '' , '' js/mobile.en.js '' : '' 3c7426a1302d '' , '' js/help.en.js '' : '' 12aebc9f0272 '' , '' js/tageditor.en.js '' : '' 820420283947 '' , '' js/tageditornew.en.js '' : '' 8b70577d4cf5 '' , '' js/inline-tag-editing.en.js '' : '' 2ddfa79492e7 '' , '' js/revisions.en.js '' : '' f4d14ad9db6c '' , '' js/review.en.js '' : '' 45ded0b70a10 '' , '' js/tagsuggestions.en.js '' : '' d1ff9b84abe5 '' , '' js/post-validation.en.js '' : '' 38ab6ae8a4a3 '' , '' js/explore-qlist.en.js '' : '' e71f14781288 '' , '' js/events.en.js '' : '' e449ebf70756 '' , '' js/keyboard-shortcuts.en.js '' : '' 4d22dd1bfd37 '' , '' js/external-editor.en.js '' : '' 5441bf1fb1b5 '' , '' js/external-editor.en.js '' : '' 5441bf1fb1b5 '' , '' js/snippet-javascript.en.js '' : '' 07c320a2d73c '' , '' js/snippet-javascript-codemirror.en.js '' : '' aa028aaeae06 '' } ) ; \r\n StackExchange.using ( `` gps '' , function ( ) { \r\n StackExchange.gps.init ( true ) ; \r\n } ) ; \r\n \r\n \r\n \r\n StackExchange.ready ( function ( ) { \r\n $ ( \ ' # nav-tour\ ' ) .click ( function ( ) { \r\n StackExchange.using ( `` gps '' , function ( ) { \r\n StackExchange.gps.track ( `` aboutpage.click '' , { aboutclick_location : `` headermain '' } , true ) ; \r\n } ) ; \r\n } ) ; \r\n } ) ; \r\n \r\n\r\n\r\n \r\n ( function ( ) { var old = $ .fn.contents ; $ .fn.contents = function ( ) { try { return old.apply ( this , arguments ) ; } catch ( e ) { return $ ( [ ] ) ; } } } ) ( ) \r\n \r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n\r\n \r\n \r\n current community\r\n \r\n \r\n \r\n \r\n \r\n \r\n chat\r\n \r\n\r\n\r\n\r\n\r\n \r\n \r\n Stack Overflow\r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n\r\n\r\n\r\n \r\n \r\n Meta Stack Overflow\r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\nyour communities \r\n\r\n \r\n \r\n\r\n \r\nSign up or log in to customize your list.\r\n \r\n \r\n\r\n \r\n more stack exchange communities\r\n \r\n company blog\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n Stack Exchange\r\n \r\n\r\n \r\n Inbox\r\n \r\n \r\n \r\n Reputation and Badges\r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n\r\n \r\n \r\n sign up\r\n log in\r\n\r\n tour\r\n \r\n help\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Tour\r\n \r\n Start here for a quick overview of the site\r\n \r\n \r\n \r\n \r\n \r\n Help Center\r\n \r\n Detailed answers to any questions you might have\r\n \r\n \r\n \r\n \r\n \r\n Meta\r\n \r\n Discuss the workings and policies of this site\r\n \r\n \r\n \r\n \r\n \r\n About Us\r\n \r\n Learn more about Stack Overflow the company\r\n \r\n \r\n \r\n \r\n \r\n Business\r\n \r\n Learn more about hiring developers or posting ads with us\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n StackExchange.ready ( function ( ) { StackExchange.topbar.init ( ) ; } ) ; \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n Stack Overflow\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Questions\r\n \r\n \r\n\r\n \r\n \r\n Jobs\r\n \r\n \r\n \r\n \r\n Documentation\r\n \r\n \r\n \r\n \r\n Tags\r\n \r\n \r\n\r\n \r\n \r\n Users\r\n \r\n \r\n\r\n \r\n \r\n Badges\r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n Ask Question\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n x Dismiss\r\n \r\n \r\n Join the Stack Overflow Community\r\n \r\n \r\n Stack Overflow is a community of 6.4 million programmers , just like you , helping each other.\r\n \r\nJoin them ; it only takes a minute : \r\n \r\n Sign up\r\n \r\n \r\n\r\n StackExchange.ready ( function ( ) { \r\n\r\n var location = 0 ; \r\n if ( $ ( `` body '' ) .hasClass ( `` questions-page '' ) ) { \r\n location = 1 ; ; \r\n } else if ( $ ( `` body '' ) .hasClass ( `` question-page '' ) ) { \r\n location = 1 ; ; \r\n } else if ( $ ( `` body '' ) .hasClass ( `` faq-page '' ) ) { \r\n location = 5 ; ; \r\n } else if ( $ ( `` body '' ) .hasClass ( `` home-page '' ) ) { \r\n location = 3 ; ; \r\n } \r\n\r\n $ ( \ ' # tell-me-more\ ' ) .click ( function ( ) { \r\n StackExchange.using ( `` gps '' , function ( ) { \r\n StackExchange.gps.track ( `` hero.action '' , { hero_action_type : \'cta\ ' , location : location } , true ) ; \r\n } ) ; \r\n } ) ; \r\n $ ( \ ' # herobox # close\ ' ) .click ( function ( ) { \r\n StackExchange.using ( `` gps '' , function ( ) { \r\n StackExchange.gps.track ( `` hero.action '' , { hero_action_type : `` minimize '' , location : location } , true ) ; \r\n } ) ; \r\n $ .cookie ( `` hero '' , `` mini '' , { path : `` / '' , expires : 365 } ) ; \r\n $ .ajax ( { \r\n url : `` /hero-mini '' , \r\n success : function ( data ) { \r\n $ ( `` # herobox '' ) .fadeOut ( `` fast '' , function ( ) { \r\n $ ( `` # herobox '' ) .replaceWith ( data ) ; \r\n $ ( `` # herobox-mini '' ) .fadeIn ( `` fast '' ) ; \r\n } ) ; \r\n } \r\n } ) ; \r\n return false ; \r\n } ) ; \r\n } ) ; \r\n\r\n\t\t\t\r\n Struct like objects in Java\r\n\t\t\r\n\t\t\t\r\n\r\n\t\t\t\r\n\r\n\r\n\r\n \r\n var ados = ados || { } ; ados.run = ados.run || [ ] ; \r\n ados.run.push ( function ( ) { ados_add_placement ( 22,8277 , '' adzerk704447018 '' ,4 ) .setZone ( 43 ) ; } ) ; \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 144\r\n down vote\r\n\r\n favorite\r\n 27\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n \r\n\r\nIs it completely against the Java way to create struct like objects ? \n\nclass SomeData1 { \n public int x ; \n public int y ; \n } \n\n\nI can see a class with accessors and mutators being more Java like.\n\nclass SomeData2 { \n int getX ( ) ; \n void setX ( int x ) ; \n\n int getY ( ) ; \n void setY ( int y ) ; \n\n private int x ; \n private int y ; \n } \n\n\nThe class from the first example is notationally convenient.\n\n// a function in a class\npublic int f ( SomeData1 d ) { \n return ( 3 * d.x ) / d.y ; \n } \n\n\nThis is not as convenient.\n\n// a function in a class\npublic int f ( SomeData2 d ) { \n return ( 3 * d.getX ( ) ) / d.getY ( ) ; \n } \n\n \r\n \r\n java design oop struct \r\n \r\n \r\n \r\n \r\nshare|improve this question \r\n \r\n \r\n\r\n \r\n edited Sep 2 \'08 at 0:29\r\n \r\n \r\n \r\n \r\n \r\n Cheekysoft\r\n \r\n 22.1k145777\r\n \r\n \r\n \r\n \r\n \r\n \r\n asked Aug 31 \'08 at 9:17\r\n \r\n \r\n \r\n \r\n \r\n Chris de Vries\r\n \r\n 18.6k52226\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 5\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Instead of public mutable fields , consider either public immutable fields or package-local mutable fields . Either would be better IMHO.\r\n – Peter Lawrey\r\n Apr 25 \'10 at 11:46\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Remember that , while the getters and setters are ugly/verbose , that 's kind of the heart of Java . It 's a non-concise language . On the other side , though , you should NEVER type any of that , since that 's what your IDE does for you . In a dynamic language you have to type less , but you have to type ( generally , though IDEs may help ) .\r\n – Dan Rosenstark\r\n May 1 \'10 at 16:47\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Ironically , while OO has it 's strengths in terms of encapsulation , this there is a price to be paid CPU and storage-wise . The Garbage collector ( almost completely ) removes the necessity of worrying about when object references should be cleared . The current trend is going full-circle by employing C-like structs off-heap . This is perfect for caching-type solutions , inter process communications , faster memory-intensive operations , lower GC o/h and can even benefit from lower storage o/h for your data-sets . If you know what you 're doing , You would n't be asking this question ... so think again ! \r\n – user924272\r\n Apr 20 \'14 at 23:19\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ user924272 : Re `` The current trend is going full-circle by employing C-like structs off-heap '' . Which you would do in Java how ? ? ? IMHO , this is an area where Java is showing its age ... \r\n – ToolmakerSteve\r\n Jun 17 \'14 at 23:17\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ ToolmakerSteve -I 'm seeing a circle . I 'm not the only one . Companies like Azul are hot on pause-less garbage collection . Java is old . True . Engineers who spot a weakness and do something about it , rather than moan ? They deserve respect ! +10 to Azul from me : - ) \r\n – user924272\r\n Jun 20 \'14 at 2:04\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n\t\t\t\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t20 Answers\r\n 20\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n \r\n active\r\n \r\n oldest\r\n \r\n votes\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t \r\n\t\t\t\t \r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 49\r\n down vote\r\n\r\n\r\n\r\n accepted\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nThis is a commonly discussed topic . The drawback of creating public fields in objects is that you have no control over the values that are set to it . In group projects where there are many programmers using the same code , it\ 's important to avoid side effects . Besides , sometimes it\ 's better to return a copy of field\ 's object or transform it somehow etc . You can mock such methods in your tests . If you create a new class you might not see all possible actions . It\ 's like defensive programming - someday getters and setters may be helpful , and it doesn\'t cost a lot to create/use them . So they are sometimes useful.\n\nIn practice , most fields have simple getters and setters . A possible solution would look like this : \n\npublic property String foo ; \na- > Foo = b- > Foo ; \n\n\nUpdate : It\ 's highly unlikely that property support will be added in Java 7 or perhaps ever . Other JVM languages like Groovy , Scala , etc do support this feature now . - Alex Miller\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Jul 10 at 16:58\r\n \r\n \r\n \r\n \r\n \r\n ALittleBetterEveryDay\r\n \r\n 133\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 9:50\r\n \r\n \r\n \r\n \r\n \r\n bibix\r\n \r\n 2,1491415\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 23\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n That 's too bad , I like C # -style properties ( which sounds like what you 're talking about ) \r\n – Jon Onstott\r\n Apr 25 \'11 at 22:26\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 29\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n I love C # -style properties . Getters and setters are so ugly ... \r\n – Svish\r\n Nov 14 \'11 at 14:07\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 2\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n So use overloading ... private int _x ; public void x ( int value ) { _x = value ; } public int x ( ) { return _x ; } \r\n – Gordon\r\n Jan 7 \'12 at 20:44\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 11\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n I prefer being able to use = , which in my opinion makes the code cleaner.\r\n – Svish\r\n Jan 17 \'12 at 12:40\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 5\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ T-Bull : Just because you CAN have two xs that are two different things , does n't make it a good idea . IMHO , that is a poor suggestion , as it could lead to confusion by human readers . Basic principle : do n't make a reader do a double-take ; make it obvious what you are saying -- Use different names for different entities . Even if the difference is merely to prepend an underscore . Do n't rely on surrounding punctuation to differentiate the entities.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:14\r\n \r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n | \r\n show 2 more comments\r\n \r\n \r\n \r\n\r\n\r\n var ados = ados || { } ; ados.run = ados.run || [ ] ; \r\n ados.run.push ( function ( ) { ados_add_placement ( 22,8277 , '' adzerk252027467 '' ,4 ) .setZone ( 44 ) ; } ) ; \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 186\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nUse common sense really . If you have something like : \n\npublic class ScreenCoord2D { \n public int x ; \n public int y ; \n } \n\n\nThen there\ 's little point in wrapping them up in getters and setters . You\ 're never going to store an x , y coordinate in whole pixels any other way . Getters and setters will only slow you down.\n\nOn the other hand , with : \n\npublic class BankAccount { \n public int balance ; \n } \n\n\nYou might want to change the way a balance is calculated at some point in the future . This should really use getters and setters.\n\nIt\ 's always preferable to know why you\ 're applying good practice , so that you know when it\ 's ok to bend the rules.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Aug 21 \'15 at 8:03\r\n \r\n \r\n \r\n \r\n \r\n Ankush soni\r\n \r\n 1,0041626\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 14:44\r\n \r\n \r\n \r\n \r\n \r\n izb\r\n \r\n 19.3k2789147\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 3\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n I go along with this answer and say further that you can create a class with public fields so long as the fields are boldindependent from each other . i.e . one field does n't depend on another . This can be quite useful in many cases , for multiple return values from a function , or for polar co-odinates . { angle , length } that go together but do not depend on each other in any intrinsic way.\r\n – Spacen Jasset\r\n Jun 5 \'12 at 20:05\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ SpacenJasset : FYI , I do n't see how your examples ( multiple return values ; polar coordinates ) have any bearing on whether to use public fields vs getter/setters . In the case of multiple return values , it might even be counter-productive , because arguably the caller should only be GETTING the returned values , which argues in favor of public getters and private setters ( immutable ) . This might also be true for returning polar coordinates from an ( x , y ) object - consider ACCUMULATIVE math errors , as changes to individual components of polar coord are converted back to ( x , y ) .\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:29\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ SpacenJasset : But I agree with your principle.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:35\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 180\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nIt appears that many Java people are not familiar with the Sun Java Coding Guidelines\nwhich say it is quite appropriate to use public instance variable when the class is \nessentially a `` Struct '' , if Java supported `` struct '' ( when there is no behavior ) .\n\nPeople tend to think getters and setters are the Java way , \nas if they are at the heart of Java . This is not so . If you follow the Sun Java \nCoding Guidelines , using public instance variables in appropriate situations , \nyou are actually writing better code than cluttering it with needless getters and setters.\n\nJava Code Conventions from 1999 and still unchanged.\n\n10.1 Providing Access to Instance and Class Variables\n\nDon\'t make any instance or class variable public without good reason . Often , instance variables don\'t need to be explicitly set or gotten-often that happens as a side effect of method calls.\n\nOne example of appropriate public instance variables is the case where the class is essentially a data structure , with no behavior . *In other words , if you would have used a struct instead of a class ( if Java supported struct ) , then it\ 's appropriate to make the class\ 's instance variables public . *\n\nhttp : //www.oracle.com/technetwork/java/javase/documentation/codeconventions-137265.html # 177\n\nhttp : //en.wikipedia.org/wiki/Plain_old_data_structure\n\nhttp : //docs.oracle.com/javase/1.3/docs/guide/collections/designfaq.html # 28\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Jan 25 \'13 at 15:52\r\n \r\n \r\n \r\n \r\n \r\n Joshua Goldberg\r\n \r\n 2,0241227\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Dec 19 \'11 at 18:29\r\n \r\n \r\n \r\n \r\n \r\n developer.g\r\n \r\n 1,904176\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 53\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n +1 For actually having an authoritative source . Every other answer is people spinning their opinions like they 're facts.\r\n – ArtOfWarfare\r\n Oct 3 \'12 at 12:20\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 1\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n There is a Java Beans specification which is an industry-standard way of accessing properties using get and set methods ... see en.wikipedia.org/wiki/JavaBeans for an overview.\r\n – user924272\r\n Apr 12 \'14 at 23:10\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 2\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ user924272 : How is that Java Beans spec relevant to this answer , which discusses when it is appropriate to use `` public instance variables '' ? If the spec were a standard way of automagically turning instance variables into properties , ala C # , it might be relevant . But it is n't , right ? It merely specifies the naming of the boilerplate getters and setters that would need to be created , to make such a mapping.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:42\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ ToolmakerSteve . This is a java question . Also , the question eludes to a a common problem where a specification exists . From an old-school perspective , it 's far easier to debug field mutations when there 's a standard way to do it - set a breakpoint at a setter . This has probably been made obsolete with modern debuggers , yet I 'm compelled to frown upon classes that directly `` punch '' objects ... while this is okay for smaller applications , it is a real headache for larger apps and large organisations\r\n – user924272\r\n Jun 20 \'14 at 1:53\r\n \r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 41\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nTo address mutability concerns you can declare x and y as final . For example : \n\nclass Data { \n public final int x ; \n public final int y ; \n public Data ( int x , int y ) { \n this.x = x ; \n this.y = y ; \n } \n } \n\n\nCalling code that attempts to write to these fields will get a compile time error of `` field x is declared final ; can not be assigned '' .\n\nThe client code can then have the \'short-hand\ ' convenience you described in your post\n\npublic class DataTest { \n public DataTest ( ) { \n Data data1 = new Data ( 1 , 5 ) ; \n Data data2 = new Data ( 2 , 4 ) ; \n System.out.println ( f ( data1 ) ) ; \n System.out.println ( f ( data2 ) ) ; \n } \n\n public int f ( Data d ) { \n return ( 3 * d.x ) / d.y ; \n } \n\n public static void main ( String [ ] args ) { \n DataTest dataTest = new DataTest ( ) ; \n } \n } \n\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Oct 15 \'08 at 3:58\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Sep 2 \'08 at 1:51\r\n \r\n \r\n \r\n \r\n \r\n Brian Hart\r\n \r\n 9,38564064\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 2\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Thanks - an answer that is useful and concise . Shows how to get the benefit of field syntax , when do n't want mutability.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:44\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n @ ToolmakerSteve - thanks for the feedback - much appreciated.\r\n – Brian Hart\r\n Jun 19 \'14 at 19:20\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n I attempted to use final instances of a final class with final fields as struct `` instances '' , but in a case expression referring such instance field , I got Case expressions must be constant expressions . what is the way around this ? what is the idiomatic concept here ? \r\n – n611x007\r\n Jul 8 \'14 at 15:28\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 1\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n final fields are still references to objects , which are not constants , as they will be initialized when the class is first used . The compiler can not know the `` value '' of the object references . Constants must be known when compiling.\r\n – Johan Tidén\r\n Oct 10 \'14 at 13:11\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n +1 Really important answer . The usefulness of immutable classes can not be underestimated in my opinion . Their `` fire-and-forget '' semantics make reasoning about code often simpler , especially in multithreaded environments , where they can be shared arbitrarily between threads , without synchronization.\r\n – TheOperator\r\n Mar 7 at 15:23\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 9\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nRe : aku , izb , John Topley ... \n\nWatch out for mutability issues ... \n\nIt may seem sensible to omit getters/setters . It actually may be ok in some cases . The real problem with the proposed pattern shown here is mutability.\n\nThe problem is once you pass an object reference out containing non-final , public fields . Anything else with that reference is free to modify those fields . You no longer have any control over the state of that object . ( Think what would happen if Strings were mutable . ) \n\nIt gets bad when that object is an important part of the internal state of another , you\ 've just exposed internal implementation . To prevent this , a copy of the object must be returned instead . This works , but can cause massive GC pressure from tons of single-use copies created.\n\nIf you have public fields , consider making the class read-only . Add the fields as parameters to the constructor , and mark the fields final . Otherwise make sure you\ 're not exposing internal state , and if you need to construct new instances for a return value , make sure it won\'t be called excessively.\n\nSee : `` Effective Java '' by Joshua Bloch -- Item # 13 : Favor Immutability.\n\nPS : Also keep in mind , all JVMs these days will optimize away the getMethod if possible , resulting in just a single field-read instruction . \n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 16:27\r\n \r\n \r\n \r\n \r\n \r\n Mark Renouf\r\n \r\n 18.9k1675114\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 12\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n How does a getter/setter resolve this issue . You still have a reference , you do n't have any synchronization with the operations . Getters/setters do n't provide protection in and of themselves.\r\n – he_the_great\r\n Nov 23 \'08 at 18:39\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 1\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Getters and setters can provide synchronization if required . You 're also expecting getters and setter to do much more than they were specified to do . Regardless of this , the problem of synchronisation still remamins.\r\n – user924272\r\n Apr 12 \'14 at 23:13\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 7\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nBy the way , the structure you\ 're giving as an example already exist in the Java base class library as java.awt.Point . It has x and y as public fields , check it out for yourself.\n\nIf you know what you\ 're doing , and others in your team know about it , then it is okay to have public fields . But you shouldn\'t rely on it because they can cause headaches as in bugs related to developers using objects as if they were stack allocated structs ( java objects are always sent to methods as references and not as copies ) .\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 14:24\r\n \r\n \r\n \r\n \r\n \r\n Spoike\r\n \r\n 48.9k33116141\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n +1 Good mention of an issue -- a way in which the result is still NOT like a C struct . However , the issue you raise about java objects always being by reference , is not improved by creating a setter instead of having a public writable field ( which is the essence of OP 's question -- which representation to use ) . Rather , it is an argument in favor of doing NEITHER . It is an argument for IMMUTABILITY . Which can either be done as a public final field , as in Brian 's answer , or by having a public getter , but no public setter . That is , whether one uses fields or accessors is immaterial.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 23:09\r\n \r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 4\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nIf the Java way is the OO way , then yes , creating a class with public fields breaks the principles around information hiding which say that an object should manage its own internal state . ( So as I\ 'm not just spouting jargon at you , a benefit of information hiding is that the internal workings of a class are hidden behind an interface - say you wanted to change the mechanism by which your struct class saved one of its fields , you\ 'll probably need to go back and change any classes that use the class ... ) \n\nYou also can\'t take advantage of the support for JavaBean naming compliant classes , which will hurt if you decide to , say , use the class in a JavaServer Page which is written using Expression Language.\n\nThe JavaWorld article Why Getter and Setter Methods are Evil article also might be of interest to you in thinking about when not to implement accessor and mutator methods.\n\nIf you\ 're writing a small solution and want to minimise the amount of code involved , the Java way may not be the right way - I guess it always depends on you and the problem you\ 're trying to solve.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Aug 31 \'08 at 9:39\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 9:33\r\n \r\n \r\n \r\n \r\n \r\n Brabster\r\n \r\n 25.4k15107160\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 1\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n +1 for link to article `` Why Getter and Setter Methods are Evil '' . However , your answer would have been clearer if you pointed out that BOTH public fields AND public getter/setters are EQUALLY NOT the Java way : As explained in that article -- when possible , do n't do either . Instead , provide clients with methods specific to what they need to do , rather than mirroring the internal representation of the instance . HOWEVER , this does n't really address the question being asked ( which to use , for simple `` struct '' case ) , which is better answered by developer.g , izb , and Brian.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 22:56\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 4\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nI have tried this in a few projects , on the theory that getters and setters clutter up the code with semantically meaningless cruft , and that other languages seem to do just fine with convention-based data-hiding or partitioning of responsibilities ( e.g . python ) . \n\nAs others have noted above , there are 2 problems that you run into , and they\ 're not really fixable : \n\n\nJust about any automated tool in the java world relies on the getter/setter convention . Ditto for , as noted by others , jsp tags , spring configuration , eclipse tools , etc . etc ... \nFighting against what your tools expect to see is a recipe for long sessions trolling through google trying to find that non-standard way of initiating spring beans . Really not worth the trouble.\nOnce you have your elegantly coded application with hundreds of public variables you will likely find at least one situation where they\ 're insufficient- where you absolutely need immutability , or you need to trigger some event when the variable gets set , or you want to throw an exception on a variable change because it sets an object state to something unpleasant . You\ 're then stuck with the unenviable choices between cluttering up your code with some special method everywhere the variable is directly referenced , having some special access form for 3 out of the 1000 variables in your application . \n\n\nAnd this is in the best case scenario of working entirely in a self-contained private project . Once you export the whole thing to a publicly accessible library these problems will become even larger . \n\nJava is very verbose , and this is a tempting thing to do . Don\'t do it.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Dec 1 \'08 at 20:50\r\n \r\n \r\n \r\n \r\n \r\n Steve B.\r\n \r\n 31.2k1060109\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Excellent discussion of the problems of going down the road of public fields . A definite shortcoming of Java , which annoys me when I have to switch back to Java from C # ( which learned from Java 's inconvenience here ) .\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 23:02\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 3\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nThere is nothing wrong with that type of code , provided that the author knows they are structs ( or data shuttles ) instead of objects . Lots of Java developers can\'t tell the difference between a well-formed object ( not just a subclass of java.lang.Object , but a true object in a specific domain ) and a pineapple . Ergo , they end up writing structs when they need objects and viceversa.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Apr 15 \'10 at 2:59\r\n \r\n \r\n \r\n \r\n \r\n luis.espinal\r\n \r\n 6,79522443\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n the pineapple make me laugh : ) \r\n – Guillaume\r\n May 14 \'12 at 15:32\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n However , this answer says nothing about what that difference is . Ragging on unskilled developers does n't help those developers know when to make a struct , and when to make a class.\r\n – ToolmakerSteve\r\n Jun 17 \'14 at 23:04\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n It does n't say anything about the difference because they author is aware of the difference ( he knows what a struct-like entity is ) . The author is asking if using structs are appropriate in a OO language , and I say yes ( depending on the problem domain . ) If the question was about what makes an object a real domain object , then you would have a leg to stand in your argument.\r\n – luis.espinal\r\n Jun 26 \'14 at 13:21\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Furthermore , the only type of unskilled developer that should not know the difference would be the one that is still in school . This is extremely fundamental , like knowing the difference between a linked list and a hash table . If a person graduates with a 4-year software degree without knowing what a true object is , then either that person is not cut for this career , or he/she should go back to school and demand a refund . I 'm serious.\r\n – luis.espinal\r\n Jun 26 \'14 at 13:23\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n But to satisfy your complain I 'll provide an answer ( which has little to anything to do with the original question and which deserves its own thread ) . Objects have behavior and encapsulate state . Structs do not . Objects are state machines . Structs are just for aggregating data . If people want a more elaborate answer , they are free to create a new question where we can elaborate on it to our hearts ' content.\r\n – luis.espinal\r\n Jun 26 \'14 at 13:25\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 3\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nDo not use public fields\n\nDon\'t use public fields when you really want to wrap the internal behavior of a class . Take java.io.BufferedReader for example . It has the following field : \n\nprivate boolean skipLF = false ; // If the next character is a line feed , skip it\n\n\nskipLF is read and written in all read methods . What if an external class running in a separate thread maliciously modified the state of skipLF in the middle of a read ? BufferedReader will definitely go haywire.\n\nDo use public fields\n\nTake this Point class for example : \n\nclass Point { \n private int x ; \n private int y ; \n\n public Point ( int x , int y ) { \n this.x = x ; \n this.y = y ; \n } \n\n public int getX ( ) { \n return this.x ; \n } \n\n public int getY ( ) { \n return this.y ; \n } \n\n public void setX ( int x ) { \n this.x = x ; \n } \n\n public void setY ( int y ) { \n this.y = y ; \n } \n } \n\n\nThis would make calculating the distance between two points very painful to write.\n\nPoint a = new Point ( 5 , 4 ) ; \nPoint b = new Point ( 4 , 9 ) ; \ndouble distance = Math.sqrt ( Math.pow ( b.getX ( ) - a.getX ( ) , 2 ) + Math.pow ( b.getY ( ) - a.getY ( ) , 2 ) ) ; \n\n\nThe class does not have any behavior other than plain getters and setters . It is acceptable to use public fields when the class represents just a data structure , and does not have , and never will have behavior ( thin getters and setters is not considered behavior here ) . It can be written better this way : \n\nclass Point { \n public int x ; \n public int y ; \n\n public Point ( int x , int y ) { \n this.x = x ; \n this.y = y ; \n } \n } \n\nPoint a = new Point ( 5 , 4 ) ; \nPoint b = new Point ( 4 , 9 ) ; \ndouble distance = Math.sqrt ( Math.pow ( b.x - a.x , 2 ) + Math.pow ( b.y - a.y , 2 ) ) ; \n\n\nClean ! \n\nBut remember : Not only your class must be absent of behavior , but it should also have no reason to have behavior in the future as well.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Nov 3 \'14 at 3:11\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Sep 25 \'14 at 6:48\r\n \r\n \r\n \r\n \r\n \r\n Krumia\r\n \r\n 6,24442647\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 2\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nThe problem with using public field access is the same problem as using new instead of a factory method - if you change your mind later , all existing callers are broken . So , from an API evolution point of view , it\ 's usually a good idea to bite the bullet and use getters/setters.\n\nOne place where I go the other way is when you strongly control access to the class , for example in an inner static class used as an internal data structure . In this case , it might be much clearer to use field access.\n\nBy the way , on e-bartek\ 's assertion , it is highly unlikely IMO that property support will be added in Java 7 . \n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Sep 15 \'08 at 16:21\r\n \r\n \r\n \r\n \r\n \r\n Alex Miller\r\n \r\n 42.5k1986136\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n 1\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n This is true , but if you 're using Java it 's not a concern , since you can refactor an entire code-base in one click ( Eclipse , Netbeans , probably VIM and Emacs too ) . If you 've opted for one of its dynamic friends , like Groovy , even a simple encapsulation could have you fixing for hours or days . Luckily you 'd have your test cases which would inform you ... how much more code you have to fix.\r\n – Dan Rosenstark\r\n May 1 \'10 at 16:28\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 2\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n You assume of course that all of the users are in your code base but of course , that 's often not true . Often it 's not even possible for various non-technical reasons to change code that might be in your own code base.\r\n – Alex Miller\r\n May 5 \'10 at 1:27\r\n \r\n \r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 2\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nI frequently use this pattern when building private inner classes to simplify my code , but I would not recommend exposing such objects in a public API . In general , the more frequently you can make objects in your public API immutable the better , and it is not possible to construct your \'struct-like\ ' object in an immutable fashion.\n\nAs an aside , even if I were writing this object as a private inner class I would still provide a constructor to simplify the code to initialize the object . Having to have 3 lines of code to get a usable object when one will do is just messy.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Oct 15 \'08 at 4:28\r\n \r\n \r\n \r\n \r\n \r\n Kris Nuttycombe\r\n \r\n 3,64311624\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 2\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nA very-very old question , but let me make another short contribution . Java 8 introduced lambda expressions and method references . Lambda expressions can be simple method references and not declare a `` true '' body . But you can not `` convert '' a field into a method reference . Thus\n\nstream.mapToInt ( SomeData1 : :x ) \n\n\nisn\'t legal , but\n\nstream.mapToInt ( SomeData2 : :getX ) \n\n\nis.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Jul 10 \'14 at 15:03\r\n \r\n \r\n \r\n \r\n \r\n Lyubomyr Shaydariv\r\n \r\n 3,87352860\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 1\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nI don\'t see the harm if you know that it\ 's always going to be a simple struct and that you\ 're never going to want to attach behaviour to it.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 9:20\r\n \r\n \r\n \r\n \r\n \r\n John Topley\r\n \r\n 74.3k37163221\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 1\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nThis is a question on Object Oriented Design , not Java the language . It\ 's generally good practice to hide data types within the class and expose only the methods that are part of the class API . If you expose internal data types , you can never change them in the future . If you hide them , your only obligation to the user is the method\ 's return and argument types.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Aug 31 \'08 at 10:13\r\n \r\n \r\n \r\n \r\n \r\n Jonathan\r\n \r\n 3,67052239\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 1\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nHere I create a program to input Name and Age of 5 different persons and perform a selection sort ( age wise ) . I used an class which act as a structure ( like C programming language ) and a main class to perform the complete operation . Hereunder I\ 'm furnishing the code ... \n\nimport java.io . * ; \n\nclass NameList { \n String name ; \n int age ; \n } \n\nclass StructNameAge { \n public static void main ( String [ ] args ) throws IOException { \n\n NameList nl [ ] =new NameList [ 5 ] ; // Create new radix of the structure NameList into \'nl\ ' object\n NameList temp=new NameList ( ) ; // Create a temporary object of the structure\n\n BufferedReader br=new BufferedReader ( new InputStreamReader ( System.in ) ) ; \n\n /* Enter data into each radix of \'nl\ ' object */\n\n for ( int i=0 ; i < 5 ; i++ ) { \n nl [ i ] =new NameList ( ) ; // Assign the structure into each radix\n\n System.out.print ( `` Name : `` ) ; \n nl [ i ] .name=br.readLine ( ) ; \n\n System.out.print ( `` Age : `` ) ; \n nl [ i ] .age=Integer.parseInt ( br.readLine ( ) ) ; \n\n System.out.println ( ) ; \n } \n\n /* Perform the sort ( Selection Sort Method ) */\n\n for ( int i=0 ; i < 4 ; i++ ) { \n for ( int j=i+1 ; j < 5 ; j++ ) { \n if ( nl [ i ] .age > nl [ j ] .age ) { \n temp=nl [ i ] ; \n nl [ i ] =nl [ j ] ; \n nl [ j ] =temp ; \n } \n } \n } \n\n /* Print each radix stored in \'nl\ ' object */\n\n for ( int i=0 ; i < 5 ; i++ ) \n System.out.println ( nl [ i ] .name+ '' ( `` +nl [ i ] .age+ '' ) '' ) ; \n } \n } \n\n\nThe above code is Error Free and Tested ... Just copy and paste it into your IDE and ... You know and what ? ? ? : ) \n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n \r\n edited Feb 19 \'13 at 9:36\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Feb 19 \'13 at 5:50\r\n \r\n \r\n \r\n \r\n \r\n Avik Kumar Goswami\r\n \r\n 193\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 0\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nYou can make a simple class with public fields and no methods in Java , but it is still a class and is still handled syntactically and in terms of memory allocation just like a class . There is no way to genuinely reproduce structs in Java.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Oct 15 \'08 at 4:35\r\n \r\n \r\n \r\n \r\n \r\n cblades\r\n \r\n 316211\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 0\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nSometime I use such class , when I need to return multiple values from a method . Of course , such object is short lived and with very limited visibility , so it should be OK.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Nov 23 \'08 at 18:43\r\n \r\n \r\n \r\n \r\n \r\n PhiLho\r\n \r\n 30.3k261104\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 0\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nAs with most things , there\ 's the general rule and then there are specific circumstances.\nIf you are doing a closed , captured application so that you know how a given object is going to be used , then you can exercise more freedom to favor visibility and/or efficiency.\nIf you\ 're developing a class which is going to be used publicly by others beyond your control , then lean towards the getter/setter model.\nAs with all things , just use common sense.\nIt\ 's often ok to do an initial round with publics and then change them to getter/setters later.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Apr 25 \'10 at 4:13\r\n \r\n \r\n \r\n \r\n \r\n Evvo\r\n \r\n 414\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n \r\n\r\n\r\n \r\n up vote\r\n 0\r\n down vote\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\nAspect-oriented programming lets you trap assignments or fetches and attach intercepting logic to them , which I propose is the right way to solve the problem . ( The issue of whether they should be public or protected or package-protected is orthogonal . ) \n\nThus you start out with unintercepted fields with the right access qualifier . As your program requirements grow you attach logic to perhaps validate , make a copy of the object being returned , etc.\n\nThe getter/setter philosophy imposes costs on a large number of simple cases where they are not needed.\n\nWhether aspect-style is cleaner or not is somewhat qualitative . I would find it easy to see just the variables in a class and view the logic separately . In fact , the raison d\'etre for Apect-oriented programming is that many concerns are cross-cutting and compartmentalizing them in the class body itself is not ideal ( logging being an example -- if you want to log all gets Java wants you to write a whole bunch of getters and keeping them in sync but AspectJ allows you a one-liner ) .\n\nThe issue of IDE is a red-herring . It is not so much the typing as it is the reading and visual pollution that arises from get/sets.\n\nAnnotations seem similar to aspect-oriented programming at first sight however they require you to exhaustively enumerate pointcuts by attaching annotations , as opposed to a concise wild-card-like pointcut specification in AspectJ.\n\nI hope awareness of AspectJ prevents people from prematurely settling on dynamic languages.\n \r\n \r\n \r\n \r\nshare|improve this answer \r\n \r\n\r\n\r\n \r\n \r\n\r\n \r\n \r\n answered Dec 19 \'11 at 19:02\r\n \r\n \r\n \r\n \r\n \r\n necromancer\r\n \r\n 8,00294489\r\n \r\n \r\n\r\n \r\n \r\n \r\n\r\n \r\n \r\n\r\n \r\n \r\n\t \r\n\t\t \r\n \r\n\r\n \r\n \r\n\t\t \r\n\t \r\n\r\n \r\n\r\n add a comment | \r\n \r\n \r\n \r\n \r\n\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t \r\n \r\n \r\n\t\t\t\t\t\t\tYour Answer\r\n\r\n\r\n \r\n StackExchange.ifUsing ( `` editor '' , function ( ) { \r\n StackExchange.using ( `` externalEditor '' , function ( ) { \r\n StackExchange.using ( `` snippets '' , function ( ) { \r\n StackExchange.snippets.init ( ) ; \r\n } ) ; \r\n } ) ; \r\n } , `` code-snippets '' ) ; \r\n \r\n \r\n\r\n\r\n StackExchange.ready ( function ( ) { \r\n initTagRenderer ( `` '' .split ( `` `` ) , `` '' .split ( `` `` ) ) ; \r\n \r\n StackExchange.using ( `` externalEditor '' , function ( ) { \r\n // Have to fire editor after snippets , if snippets enabled\r\n if ( StackExchange.settings.snippets.snippetsEnabled ) { \r\n StackExchange.using ( `` snippets '' , function ( ) { \r\n createEditor ( ) ; \r\n } ) ; \r\n } \r\n else { \r\n createEditor ( ) ; \r\n } \r\n } ) ; \r\n\r\n function createEditor ( ) { \r\n prepareEditor ( { \r\n heartbeatType : \'answer\ ' , \r\n convertImagesToLinks : true , \r\n reputationToPostImages : 10 , \r\n bindNavPrevention : true , \r\n postfix : `` '' , \r\n onDemand : true , \r\n discardSelector : `` .discard-answer '' \r\n , immediatelyShowMarkdownHelp : true\r\n } ) ; \r\n \r\n\r\n } \r\n } ) ; \r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n draft saved\r\n\r\n draft discarded\r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t \r\n \r\n \r\n \r\n Sign up or log in\r\n \r\n StackExchange.ready ( function ( ) { \r\n StackExchange.helpers.onClickDraftSave ( \ ' # login-link\ ' ) ; \r\n } ) ; \r\n \r\n \r\n Sign up using Google\r\n \r\n \r\n Sign up using Facebook\r\n \r\n \r\n Sign up using Email and Password\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n Post as a guest\r\n \r\n \r\n \r\n \r\n \r\n Name\r\n \r\n \r\n \r\n Email\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n StackExchange.ready ( \r\n function ( ) { \r\n StackExchange.openid.initPostLogin ( \'.new-post-login\ ' , \'http % 3a % 2f % 2fstackoverflow.com % 2fquestions % 2f36701 % 2fstruct-like-objects-in-java % 23new-answer\ ' , \'question_page\ ' ) ; \r\n } \r\n ) ; \r\n \r\n \r\n Post as a guest\r\n \r\n \r\n \r\n \r\n \r\n Name\r\n \r\n \r\n \r\n Email\r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n \r\n\r\n\t\t\t\t\t\t\t\r\n \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tdiscard\r\n\r\n\r\nBy posting your answer , you agree to the privacy policy and terms of service.\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\r\n\r\n\r\n\t\t\t\t\t\t\r\nNot the answer you 're looking for ? \t\t\t\t\t\t\tBrowse other questions tagged java design oop struct or ask your own question.\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t asked\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t 8 years ago\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t viewed\r\n\t\t\t \r\n\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t 254451 times\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t active\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t 5 months ago\r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n var ados = ados || { } ; ados.run = ados.run || [ ] ; \r\n ados.run.push ( function ( ) { ados_add_placement ( 22,8277 , '' adzerk1840969258 '' , [ 5,17,2221 ] ) .setZone ( 45 ) ; } ) ; \r\n \r\n \r\n \r\n \r\n ; ( function ( n ) { var u=Object.assign||function ( n ) { for ( var i , r , u , f , e= [ ] , t=1 ; t < arguments.length ; t++ ) e [ t-1 ] =arguments [ t ] ; for ( i=0 , r=e ; i < r.length ; i++ ) { u=r [ i ] ; for ( f in u ) n [ f ] =u [ f ] } return n } , r , t , f , i ; try { if ( typeof [ ] .indexOf ! = '' function '' ) return ; if ( window.attachEvent & & ! window.addEventListener ) return ; if ( r= [ `` stackoverflow.com '' , '' serverfault.com '' , '' careers.stackoverflow.com '' , '' blog.codinghorror.com '' , '' joelonsoftware.com '' , '' www.joelonsoftware.com '' , '' talent.stackoverflow.com '' ] , r [ 0 ] ! == '' * '' & & r.indexOf ( location.hostname ) ===-1 ) return ; t=window ; f=t.clc_opts ? u ( { } , window.clc_opts ) : { } ; t.clc_opts=u ( n , f ) ; void 0 ; t.clc_opts.autoload & & ( t.clc_init=t.clc_init|| [ ] , t.clc_init.push ( function ( ) { return t.clc.load ( ) } ) ) ; i=document.createElement ( `` script '' ) ; i.async= ! 0 ; void 0 ; i.src=t.clc_opts.lib ; document.body.appendChild ( i ) } catch ( e ) { void 0 } } ) .call ( null , { `` azw '' : true , '' kt '' :2000 , '' autoload '' : true , '' tto '' : true , '' d '' : { `` sb '' : [ `` hireme '' , '' clc-sb '' ] , '' tlb '' : [ `` careers1 '' , '' clc-tlb '' ] , '' mlb '' : [ `` careers3 '' , '' clc-mlb '' ] } , '' allowed '' : [ `` stackoverflow.com '' , '' serverfault.com '' , '' careers.stackoverflow.com '' , '' blog.codinghorror.com '' , '' joelonsoftware.com '' , '' www.joelonsoftware.com '' , '' talent.stackoverflow.com '' ] , '' h '' : '' clc.stackoverflow.com '' , '' u '' : '' //clc.stackoverflow.com/p.js '' , '' lib '' : '' //cdn.sstatic.net/clc/clc.min.js ? v=949796768e2b '' } ) ; \r\n \r\nwindow.clcfl_request = \'AquZZtAYIdQIAAAAAF2PAAACAAAAAgAAAAAYAAAAfGphdmF8ZGVzaWdufG9vcHxzdHJ1Y3R8AC21bLOokZJaoUk\ ' ; \r\n ; ( function ( n ) { var t , i ; try { if ( typeof [ ] .indexOf ! = '' function '' ) return ; if ( window.attachEvent & & ! window.addEventListener ) return ; if ( n.allowed [ 0 ] ! == '' * '' & & n.allowed.indexOf ( location.hostname ) ===-1 ) return ; t=window ; t.clcfl=t.clcfl|| { } ; t.clcfl_request||void 0 ; t.clcfl.init=t.clcfl.init|| [ ] ; t.clcfl.init.push ( function ( n ) { return n.load ( ) } ) ; t.clcfl.options=n ; i=document.createElement ( `` script '' ) ; i.async= ! 0 ; i.src=n.lib ; document.body.appendChild ( i ) } catch ( r ) { } } ) .call ( null , { `` azw '' : true , '' kt '' :2000 , '' autoload '' : true , '' tto '' : false , '' d '' : { `` sb '' : [ `` hireme '' , '' clc-sb '' ] , '' tlb '' : [ `` careers1 '' , '' clc-tlb '' ] , '' mlb '' : [ `` careers3 '' , '' clc-mlb '' ] } , '' allowed '' : [ `` stackoverflow.com '' , '' serverfault.com '' , '' careers.stackoverflow.com '' , '' blog.codinghorror.com '' , '' joelonsoftware.com '' , '' www.joelonsoftware.com '' , '' talent.stackoverflow.com '' ] , '' h '' : '' clc.stackoverflow.com '' , '' u '' : '' //clc.stackoverflow.com/fl/markup-bg.js '' , '' lib '' : '' //cdn.sstatic.net/clc/fl/clc.min.js ? v=b8405c6e42c0 '' } ) ; \r\n \r\n\t\t\t\r\n\r\n \r\n\tLinked\r\n\t\r\n\r\n\r\n\t\r\n\t\t0\r\n\t\r\n\tStructured data in java\r\n\r\n\r\n\t\r\n\t\t4\r\n\t\r\n\tAbsence of property syntax in Java\r\n\r\n\r\n\t\r\n\t\t13\r\n\t\r\n\tWhy is using a class as a struct bad practice in Java ? \r\n\r\n\r\n\t\r\n\t\t0\r\n\t\r\n\tJava initializing a pure struct\r\n\r\n\r\n\t\r\n\t\t2\r\n\t\r\n\tIs there something like C 's struct in Java ? \r\n\r\n\r\n\t\r\n\t\t3\r\n\t\r\n\todd one out algorithm\r\n\r\n\r\n\t\r\n\t\t-3\r\n\t\r\n\tData structures using java\r\n\r\n\r\n\t\r\n\t\t0\r\n\t\r\n\tJava — object creation “on the fly”\r\n\r\n\r\n\t\r\n\t\t3\r\n\t\r\n\tcomparable used as structure in a binary tree\r\n\t\t\t\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\tRelated\r\n \r\n 3766Is Java “pass-by-reference” or “pass-by-value” ? 481When should you use a class vs a struct in C++ ? 251When should I use a struct instead of a class ? 309What are the differences between struct and class in C++ ? 147Using “final” modifier whenever applicable in java13Why is using a class as a struct bad practice in Java ? 93How to compare objects by multiple fields942When to use struct ? 1Designing a thin Object Oriented Query Language for SQL-1Create a Struct In Java Like C++\r\n \r\n\t\t\t\t\r\n \r\n\r\n \r\n \r\n Hot Network Questions\r\n \r\n \r\n \r\n \r\n \r\n How to use grep for 2 different lines\r\n \r\n\r\n \r\n \r\n \r\n Easier way to collect beans in Poke-Pelago ? \r\n \r\n\r\n \r\n \r\n \r\n Why would Snape set his office password to 'Dumbledore ' ? \r\n \r\n\r\n \r\n \r\n \r\n Server admin sent me a private key to use . Why ? \r\n \r\n\r\n \r\n \r\n \r\n Why does MIT have a /8 IPv4 block ? \r\n \r\n\r\n \r\n \r\n \r\n Why increase the number of cylinders in an engine instead of increasing their volume ? \r\n \r\n\r\n \r\n \r\n \r\n What are some counter-intuitive results in mathematics that involve only finite objects ? \r\n \r\n\r\n \r\n \r\n \r\n Are there any OSes that verify program signatures before executing them ? \r\n \r\n\r\n \r\n \r\n \r\n Are the Twitter disclaimers that state `` opinions are my own '' legally valid ? \r\n \r\n\r\n \r\n \r\n \r\n Locate Start and End Positions of Repeated Sequences in a list\r\n \r\n\r\n \r\n \r\n \r\n What are the five most powerful characters in your language ? \r\n \r\n\r\n \r\n \r\n \r\n Am I entitled for compensation after flight delay due to aircraft malfunction ? \r\n \r\n\r\n \r\n \r\n \r\n When does an automatic app update happen on iOS ? \r\n \r\n\r\n \r\n \r\n \r\n How dangerous are kangaroos ? \r\n \r\n\r\n \r\n \r\n \r\n Who is the woman in this image representing ? \r\n \r\n\r\n \r\n \r\n \r\n Why is pow ( int , int ) so slow ? \r\n \r\n\r\n \r\n \r\n \r\n ¿Por qué en español hay tan pocas palabras acabadas en `` u '' ? \r\n \r\n\r\n \r\n \r\n \r\n Sudoers blacklist\r\n \r\n\r\n \r\n \r\n \r\n What plumbing did well-equipped sailing ships have ? \r\n \r\n\r\n \r\n \r\n \r\n Interleave strings\r\n \r\n\r\n \r\n \r\n \r\n Is it legal to mortgage a property twice or more ? \r\n \r\n\r\n \r\n \r\n \r\n What is the most possible candidates that could tie for the US President in the Electoral College\r\n \r\n\r\n \r\n \r\n \r\n What is the most common English term for a person who attempts a coup d'état ? \r\n \r\n\r\n \r\n \r\n \r\n Please release me ! \r\n \r\n\r\n \r\n \r\n\r\n \r\n more hot questions\r\n \r\n\r\n\t\t\r\n\t\r\n\r\n \r\n \r\n question feed\r\n \r\n \r\n\t\r\nStackExchange.ready ( function ( ) { $ .get ( \'/posts/36701/ivc/363d\ ' ) ; } ) ; \r\n\r\n\r\n \r\nlang-java\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n about us\r\n tour\r\n help\r\n blog\r\n chat\r\n data\r\n legal\r\n privacy policy\r\n work here\r\n advertising info\r\n\r\n mobile\r\n contact us\r\n feedback\r\n \r\n \r\n \r\n \r\n \r\n \r\n Technology\r\n \r\n \r\n Life / Arts\r\n \r\n \r\n Culture / Recreation\r\n \r\n \r\n Science\r\n \r\n \r\n Other\r\n \r\n \r\n \r\n \r\n \r\n Stack Overflow\r\n Server Fault\r\n Super User\r\n Web Applications\r\n Ask Ubuntu\r\n Webmasters\r\n Game Development\r\n TeX - LaTeX\r\n \r\n Software Engineering\r\n Unix & Linux\r\n Ask Different ( Apple ) \r\n WordPress Development\r\n Geographic Information Systems\r\n Electrical Engineering\r\n Android Enthusiasts\r\n Information Security\r\n \r\n Database Administrators\r\n Drupal Answers\r\n SharePoint\r\n User Experience\r\n Mathematica\r\n Salesforce\r\n ExpressionEngine® Answers\r\n Cryptography\r\n \r\n Code Review\r\n Magento\r\n Signal Processing\r\n Raspberry Pi\r\n Programming Puzzles & Code Golf\r\n \r\n \r\n \r\n more ( 7 ) \r\n \r\n \r\n \r\n \r\n \r\n \r\n Photography\r\n Science Fiction & Fantasy\r\n Graphic Design\r\n Movies & TV\r\n Music : Practice & Theory\r\n Seasoned Advice ( cooking ) \r\n Home Improvement\r\n Personal Finance & Money\r\n \r\n Academia\r\n \r\n \r\n \r\n more ( 8 ) \r\n \r\n \r\n \r\n \r\n \r\n \r\n English Language & Usage\r\n Skeptics\r\n Mi Yodeya ( Judaism ) \r\n Travel\r\n Christianity\r\n English Language Learners\r\n Japanese Language\r\n Arqade ( gaming ) \r\n \r\n Bicycles\r\n Role-playing Games\r\n Anime & Manga\r\n Motor Vehicle Maintenance & Repair\r\n \r\n \r\n \r\n more ( 17 ) \r\n \r\n \r\n \r\n \r\n \r\n \r\n MathOverflow\r\n Mathematics\r\n Cross Validated ( stats ) \r\n Theoretical Computer Science\r\n Physics\r\n Chemistry\r\n Biology\r\n Computer Science\r\n \r\n Philosophy\r\n \r\n \r\n \r\n more ( 3 ) \r\n \r\n \r\n \r\n \r\n \r\n \r\n Meta Stack Exchange\r\n Stack Apps\r\n Area 51\r\n Stack Overflow Talent\r\n \r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n site design / logo © 2016 Stack Exchange Inc ; user contributions licensed under cc by-sa 3.0 \r\n with attribution required\r\n \r\n \r\n rev 2016.12.9.4320\r\n \r\n \r\n \r\n \r\n Stack Overflow works best with JavaScript enabled\r\n \r\n\r\nvar p = `` http '' , d = `` static '' ; if ( document.location.protocol == `` https : '' ) { p += `` s '' ; d = `` engine '' ; } var z = document.createElement ( `` script '' ) ; z.type = `` text/javascript '' ; z.async = true ; z.src = p + `` : // '' + d + `` .adzerk.net/ados.js '' ; var s = document.getElementsByTagName ( `` script '' ) [ 0 ] ; s.parentNode.insertBefore ( z , s ) ; \r\n\r\n var ados = ados || { } ; \r\n ados.run = ados.run || [ ] ; \r\n \r\n \r\n \r\n ados.run.push ( function ( ) { \r\n setTimeout ( function ( ) { $ ( `` # adzerk-user-match '' ) .remove ( ) ; } , window.AUMIframeDone ? 0 : 2000 ) ; \r\n ados_setKeywords ( \'java , design , oop , struct\ ' ) ; ; ados_load ( ) ; \r\n } ) ; \r\n \r\n\r\n\r\n \r\n ( function ( i , s , o , g , r , a , m ) { \r\n i [ \'GoogleAnalyticsObject\ ' ] = r ; i [ r ] = i [ r ] || function ( ) { ( i [ r ] .q = i [ r ] .q || [ ] ) .push ( arguments ) } , i [ r ] .l = 1 * new Date ( ) ; a = s.createElement ( o ) , \r\n m = s.getElementsByTagName ( o ) [ 0 ] ; a.async = 1 ; a.src = g ; m.parentNode.insertBefore ( a , m ) ; \r\n } ) ( window , document , \'script\ ' , \'https : //www.google-analytics.com/analytics.js\ ' , \'ga\ ' ) ; \r\n \r\n ga ( \'create\ ' , \'UA-5620270-1\ ' ) ; \r\n \r\n ga ( \'create\ ' , \'UA-5620270-59\ ' , \'auto\ ' , \'pageData\ ' ) ; \r\n \r\n ga ( \'set\ ' , \'dimension2\ ' , \'|java|design|oop|struct|\ ' ) ; ga ( \'pageData.set\ ' , \'dimension2\ ' , \'|java|design|oop|struct|\ ' ) ; ga ( \'send\ ' , \'pageview\ ' ) ; \r\n ga ( \'pageData.send\ ' , \'pageview\ ' ) ; \r\n\r\n var _qevents = _qevents || [ ] , \r\n _comscore = _comscore || [ ] ; \r\n ( function ( ) { \r\n var ssl=\'https : \'==document.location.protocol , \r\n s=document.getElementsByTagName ( \'script\ ' ) [ 0 ] , \r\n qc=document.createElement ( \'script\ ' ) ; \r\n qc.async = true ; \r\n qc.src = ( ssl ? \'https : //secure\ ' : \'http : //edge\ ' ) + \'.quantserve.com/quant.js\ ' ; \r\n s.parentNode.insertBefore ( qc , s ) ; \r\n _qevents.push ( { qacct : `` p-c1rF4kxgLUzNc '' } ) ; \r\n var sc=document.createElement ( \'script\ ' ) ; \r\n sc.async=true ; \r\n sc.src= ( ssl ? \'https : //sb\ ' : \'http : //b\ ' ) + \'.scorecardresearch.com/beacon.js\ ' ; \r\n s.parentNode.insertBefore ( sc , s ) ; \r\n _comscore.push ( { c1 : `` 2 '' , c2 : `` 17440561 '' } ) ; \r\n } ) ( ) ; \r\n\r\n \r\n \r\n \r\n \r\n \r\n ( function ( appendChild ) { \r\n Node.prototype.appendChild = function ( ) { \r\n var parent = this ; \r\n var newNode = arguments [ 0 ] ; \r\n if ( parent.nodeName === \'HEAD\'\r\n & & newNode\r\n & & newNode.nodeName === \'SCRIPT\'\r\n & & newNode.src ) { \r\n \r\n window.setTimeout ( function ( ) { \r\n var result = newNode.src.match ( /^https : \\/\\/maps\\.googleapis\\.com\\/maps\\/api\\/place\\/js\\/ ( \\w+ ) Service\\./i ) || [ ] ; \r\n var service = result [ 1 ] ; \r\n if ( service ) { \r\n if ( service === \'Autocompletion\ ' ) service = 2 ; \r\n else if ( service === \'Place\ ' ) service = 1 ; \r\n else service = 0 ; \r\n StackExchange.using ( \'gps\ ' , function ( ) { \r\n StackExchange.gps.track ( \'google_maps_places_api.call\ ' , { service : service } ) ; \r\n } ) ; \r\n } \r\n } , 0 ) ; \r\n } \r\n return appendChild.apply ( this , arguments ) ; \r\n } ; \r\n } ) ( Node.prototype.appendChild ) ; \r\n \r\n \r\n ' 